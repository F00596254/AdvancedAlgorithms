#include <iostream>
#include <vector>
#include <sstream>
#include <iomanip>
#include <bitset>
#include <cstring>

const unsigned int K[] = {
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

inline unsigned int rotr(unsigned int n, unsigned int x) {
    return (x >> n) | (x << (32 - n));
}

inline unsigned int ch(unsigned int x, unsigned int y, unsigned int z) {
    return (x & y) ^ (~x & z);
}

inline unsigned int maj(unsigned int x, unsigned int y, unsigned int z) {
    return (x & y) ^ (x & z) ^ (y & z);
}

inline unsigned int sigma0(unsigned int x) {
    return rotr(2, x) ^ rotr(13, x) ^ rotr(22, x);
}

inline unsigned int sigma1(unsigned int x) {
    return rotr(6, x) ^ rotr(11, x) ^ rotr(25, x);
}

inline unsigned int gamma0(unsigned int x) {
    return rotr(7, x) ^ rotr(18, x) ^ (x >> 3);
}

inline unsigned int gamma1(unsigned int x) {
    return rotr(17, x) ^ rotr(19, x) ^ (x >> 10);
}

std::vector<unsigned char> padMessage(const std::string& message) {
    unsigned long long messageLength = message.size() * 8;
    std::vector<unsigned char> paddedMessage(message.begin(), message.end());

    paddedMessage.push_back(0x80);

    
    while ((paddedMessage.size() * 8) % 512 != 448) {
        paddedMessage.push_back(0x00);
    }

    
    for (int i = 7; i >= 0; --i) {
        paddedMessage.push_back((messageLength >> (i * 8)) & 0xFF);
    }

    return paddedMessage;
}

std::string sha256(const std::string& message) {
    
    unsigned int h0 = 0x6a09e667;
    unsigned int h1 = 0xbb67ae85;
    unsigned int h2 = 0x3c6ef372;
    unsigned int h3 = 0xa54ff53a;
    unsigned int h4 = 0x510e527f;
    unsigned int h5 = 0x9b05688c;
    unsigned int h6 = 0x1f83d9ab;
    unsigned int h7 = 0x5be0cd19;

    std::vector<unsigned char> paddedMessage = padMessage(message);

    for (size_t chunkStart = 0; chunkStart < paddedMessage.size(); chunkStart += 64) {

        unsigned int w[64] = {0};
        for (int i = 0; i < 16; ++i) {
            w[i] = (paddedMessage[chunkStart + i * 4] << 24) |
                   (paddedMessage[chunkStart + i * 4 + 1] << 16) |
                   (paddedMessage[chunkStart + i * 4 + 2] << 8) |
                   (paddedMessage[chunkStart + i * 4 + 3]);
        }

        for (int i = 16; i < 64; ++i) {
            w[i] = gamma1(w[i - 2]) + w[i - 7] + gamma0(w[i - 15]) + w[i - 16];
        }

        unsigned int a = h0;
        unsigned int b = h1;
        unsigned int c = h2;
        unsigned int d = h3;
        unsigned int e = h4;
        unsigned int f = h5;
        unsigned int g = h6;
        unsigned int h = h7;

        for (int i = 0; i < 64; ++i) {
            unsigned int temp1 = h + sigma1(e) + ch(e, f, g) + K[i] + w[i];
            unsigned int temp2 = sigma0(a) + maj(a, b, c);
            h = g;
            g = f;
            f = e;
            e = d + temp1;
            d = c;
            c = b;
            b = a;
            a = temp1 + temp2;
        }

        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
        h4 += e;
        h5 += f;
        h6 += g;
        h7 += h;
    }

    std::ostringstream hash;
    hash << std::hex << std::setfill('0');
    hash << std::setw(8) << h0 << std::setw(8) << h1 << std::setw(8) << h2 << std::setw(8) << h3;
    hash << std::setw(8) << h4 << std::setw(8) << h5 << std::setw(8) << h6 << std::setw(8) << h7;

    return hash.str();
}

int main() {
    std::string text = "Example text from the Book of Mark...";
    std::string hash = sha256(text);

    std::cout << "SHA-256 Hash: " << hash << std::endl;
    return 0;
}
